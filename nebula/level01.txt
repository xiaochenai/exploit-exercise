wiki:
http://en.wikipedia.org/wiki/Env
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/env.html

env
used to either print a list of environment variables or run another utility in an altered environment without having to modify the currently existing environment.


questions:
env [-i] [name=value]... [utility [argument...]]

note:
the name can be 
			LANG
				Provide a default value for the internationalization variables that are unset or null. (See XBD Internationalization Variables for the precedence of internationalization variables used to determine the values of locale categories.)
			LC_ALL
				If set to a non-empty string value, override the values of all the other internationalization variables.
			LC_CTYPE
				Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).
			LC_MESSAGES
				Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
			NLSPATH
				[XSI] [Option Start] Determine the location of message catalogs for the processing of LC_MESSAGES. [Option End]
			PATH
				Determine the location of the utility, as described in XBD Environment Variables. If PATH is specified as a name= value operand to env, the value given shall be used in the search for utility.
-i
	Invoke utility with exactly the environment specified by the arguments; the inherited environment shall be ignored completely.



the man command
http://www.computerhope.com/unix/uman.htm

man is the interface used to view the system's reference manuals.

the ln command
ref:http://www.computerhope.com/unix/uln.htm

ln creates links between files
Sytax
	ln [OPTION]... TARGET [...] [LINKNAME [...]]
Des:
	ln creates a link to file TARGET with the name LINKNAME. If LINKNAME is omitted, a link to TARGET is created in the current directory, using the name of TARGET as the LINKNAME.
	ln creates hard links by default, or symbolic links if the -s (--symbolic) option is specified. When creating hard links, each TARGET must exist.

the link command

"link filename linkname". Our first argument is the name of the file whose data we're linking to; the second argument is the name of the new link we're creating.

The important thing to realize is that we did not make a copy of this data

important note:
	As you can see, the data stays on the disk even after the "file" (which is actually just a link to the data) is removed. We can still access that data as long as there is a link to it. This is important to know when you're removing files â€” "removing" a file just makes the data inaccessible by unlink-ing it. The data still exists on the storage media, somewhere, inaccessible to the system, and that space on disk is marked as being available for future use.

The type of link we've been working with here is sometimes called a "hard" link. A hard link and the data it links to must always exist on the same filesystem; you can't, for instance, create a hard link on one partition to file data stored on another partition. You also can't create a hard link to a directory. (Only symbolic links may link to a directory; we'll get to that in a moment!)
the echo command

The Difference Between ln And link

ln, by default, creates a hard link just like link does. So this ln command:

	example
		ln file1.txt file2.txt
		is same as:
		link file1.txt file2.txt

		if use -s option
			Will create a symbolic link to file1.txt named file2.txt. In contrast to our hard link example, here's an illustration to help you visualize our symbolic link:
res:http://www.computerhope.com/unix/uecho.htm

echo displays a line of text